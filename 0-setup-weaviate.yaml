AWSTemplateFormatVersion: '2010-09-09'
Description: 'Weaviate ECS Cluster and Service with SageMaker Studio and VPC'

Resources:
  ECSPermissionsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WorkshopECSAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "ecs:*"
              - "iam:PassRole"
            Resource: "*"
      Roles:
        - WSParticipantRole

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: WeaviateVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  WeaviateCluster:
    Type: AWS::ECS::Cluster
    DependsOn: ECSPermissionsPolicy
    Properties:
      ClusterName: weaviate-cluster

  WeaviateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: ECSPermissionsPolicy
    Properties:
      Family: weaviate-task
      Cpu: '1024'
      Memory: '3072'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      TaskRoleArn: !Ref 'ECSTaskRole'
      ContainerDefinitions:
        - Name: weaviate
          Image: cr.weaviate.io/semitechnologies/weaviate:v1.32.5
          Cpu: 1024
          Memory: 3072
          PortMappings:
            - Name: '8080'
              ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
              AppProtocol: http
            - Name: '50051'
              ContainerPort: 50051
              HostPort: 50051
              Protocol: tcp
              AppProtocol: grpc
          Essential: true
          Environment:
            - Name: ENABLE_API_BASED_MODULES
              Value: true
            - Name: ASYNC_INDEXING
              Value: true
            - Name: AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED
              Value: true
      EphemeralStorage:
        SizeInGiB: 21
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX

  WeaviateService:
    Type: AWS::ECS::Service
    DependsOn: ECSPermissionsPolicy
    Properties:
      ServiceName: weaviate-service
      Cluster: !Ref WeaviateCluster
      TaskDefinition: !Ref WeaviateTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref WeaviateSecurityGroup
      PlatformVersion: LATEST

  WeaviateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Weaviate
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 50051
          CidrIp: !GetAtt VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 50051
          CidrIp: !Join ['', [!Ref NatGateway1EIP, '/32']]
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 50051
          CidrIp: !Join ['', [!Ref NatGateway2EIP, '/32']]

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: ECSPermissionsPolicy
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    DependsOn: ECSPermissionsPolicy
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      # Add any additional policies required by your Weaviate task here

  SageMakerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for SageMaker
      VpcId: !Ref VPC
      SecurityGroupEgress:
         - IpProtocol: -1
           FromPort: -1
           ToPort: -1
           CidrIp: 0.0.0.0/0

  SageMakerDomain:
    Type: AWS::SageMaker::Domain
    Properties:
      DomainName: WeaviateSMDomain
      AuthMode: IAM
      DefaultUserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
        JupyterServerAppSettings:
          DefaultResourceSpec:
            InstanceType: system
        KernelGatewayAppSettings:
          DefaultResourceSpec:
            InstanceType: ml.t3.medium
        JupyterLabAppSettings:
          DefaultResourceSpec:
            InstanceType: ml.t3.medium
        SharingSettings:
          NotebookOutputOption: Allowed
        SecurityGroups:
          - !Ref SageMakerSecurityGroup
      AppNetworkAccessType: VpcOnly
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcId: !Ref VPC

  SageMakerUserProfile:
    Type: AWS::SageMaker::UserProfile
    Properties:
      DomainId: !Ref SageMakerDomain
      UserProfileName: weaviate-user
      UserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn

  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess

  SageMakerVSCodeAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SageMakerVSCodeAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sagemaker:StartSession
            Resource: !Sub 'arn:${AWS::Partition}:sagemaker:${AWS::Region}:${AWS::AccountId}:space/${SageMakerDomain}/*'
      Roles:
        - !Ref SageMakerExecutionRole

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${AWS::StackName}-PUBLIC-SUBNETS

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${AWS::StackName}-PRIVATE-SUBNETS

  WeaviateServiceName:
    Description: The name of the ECS service running Weaviate
    Value: !Ref WeaviateService

  WeaviateClusterName:
    Description: The name of the ECS cluster running Weaviate
    Value: !Ref WeaviateCluster

  SageMakerDomainId:
    Description: The ID of the SageMaker Domain
    Value: !Ref SageMakerDomain

  SageMakerUserProfileName:
    Description: The name of the SageMaker UserProfile
    Value: !Ref SageMakerUserProfile
